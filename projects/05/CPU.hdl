// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*
    Given an instruction ixxaccccccdddjjj:
    The i-bit (aka opcode) codes the instruction type:
    - 0 for an A-instruction
    - 1 for a C-instruction.
    For an A-instruction, the entire 16-bit value should be loaded into the A register.
    For a C-instruction, the a- and c- bits code the comp part of the instruction.  The d-
    and j- bits code the dest and jump parts of the instruction. (x bits are ignored).
    */

    Not(in=instruction[15], out=opcode);
    Mux16(a=aluout, b=instruction, sel=opcode, out=muxout);
    Or(a=opcode, b=instruction[5], out=loadA);
    ARegister(in=muxout, load=loadA, out=aregout, out[0..14]=addressM);

    Mux16(a=aregout, b=inM, sel=instruction[12], out=muxout2);

    ALU(
        x=dregout,
        y=muxout2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=zr,
        ng=ng
    );
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluout, load=loadD, out=dregout);

    /*
    out < 0 | out = 0 | out > 0         ng | zr        jump
    0         0         0               0  | 0         0
    0         0         1               0  | 0         1
    0         1         0               0  | 0         0
    0         1         1               0  | 0         1
    1         0         0               0  | 0         0
    1         0         1               0  | 0         0
    1         1         0               0  | 0         0
    1         1         1               0  | 0         1

    0         0         0               1  | 0         0
    0         0         1               1  | 0         0
    0         1         0               1  | 0         0
    0         1         1               1  | 0         0
    1         0         0               1  | 0         1
    1         0         1               1  | 0         1
    1         1         0               1  | 0         1
    1         1         1               1  | 0         1

    0         0         0               0  | 1         0
    0         0         1               0  | 1         0
    0         1         0               0  | 1         1
    0         1         1               0  | 1         1
    1         0         0               0  | 1         0
    1         0         1               0  | 1         0
    1         1         0               0  | 1         1
    1         1         1               0  | 1         1

    JMP = (j3 && ng) || (j2 && zr) || (j1 && !(ng || zr))

    */
    Or(a=ng, b=zr, out=ngorzr);
    Not(in=ngorzr, out=notngorzr);

    And(a=instruction[2], b=ng, out=jmp1);
    And(a=instruction[1], b=zr, out=jmp2);
    And(a=instruction[0], b=notngorzr, out=jmp3);
    Or8Way(in[0]=jmp1, in[1]=jmp2, in[2]=jmp3, out=jmp4);
    And(a=instruction[15], b=jmp4, out=loadpc);

    PC(in=aregout, load=loadpc, reset=reset, inc=true, out[0..14]=pc);
}
